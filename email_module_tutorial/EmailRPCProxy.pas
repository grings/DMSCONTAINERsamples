//------------------------------------------------------------------
// Proxy Unit Generated by Delphi Microservices Container 3.1.0 RC7
// Do not modify this unit!
// Generated at: 2020-05-05 11:25:09
//------------------------------------------------------------------
unit EmailRPCProxy;

interface

uses
  System.SysUtils,
  System.Classes,
  MVCFramework.JSONRPC,
  MVCFramework.JSONRPC.Client,
  MVCFramework.Serializer.Commons,
  JsonDataObjects;

type
  TEmailRPCProxy = class
  protected
    fRPCExecutor: IMVCJSONRPCExecutor;
    function NewReqID: Int64;
  public
    function RPCExecutor: IMVCJSONRPCExecutor;
    constructor Create(const EndpointURL: String); virtual;
    /// <summary>
    /// Invokes [procedure SetUserSender(const Token: string; const UserID: Int64; aSender: TJsonObject)]
    /// </summary>
    procedure SetUserSender(const Token: string; const UserID: Int64; aSender: TJsonObject);
    /// <summary>
    /// Invokes [function RemoveUserSender(const Token: string; const UserID: Int64): TJsonObject]
    /// </summary>
    function RemoveUserSender(const Token: string; const UserID: Int64): TJDOJsonObject;
    /// <summary>
    /// Invokes [function GetUserSender(const Token: string; const UserID: Int64): TSender]
    /// </summary>
    function GetUserSender(const Token: string; const UserID: Int64): IJSONRPCResponse;
    /// <summary>
    /// Invokes [function GetMessagesByUserName(const Token: string; const SenderUserName: string): TObjectList<Jobs.Email.Entities.TMessage>]
    /// </summary>
    function GetMessagesByUserName(const Token: string; const SenderUserName: string): IJSONRPCResponse;
    /// <summary>
    /// Invokes [function GetMyMessages(const Token: string; const StatusList: TJsonArray): TObjectList<Jobs.Email.Entities.TMessage>]
    /// </summary>
    function GetMyMessages(const Token: string; const StatusList: TJsonArray): IJSONRPCResponse;
    /// <summary>
    /// Invokes [function GetMessageByID(const Token: string; const MessageID: Int64): TMessage]
    /// </summary>
    function GetMessageByID(const Token: string; const MessageID: Int64): IJSONRPCResponse;
    /// <summary>
    /// Invokes [function GetMessagesByStatus(const Token: string; const StatusList: TJsonArray): TObjectList<Jobs.Email.Entities.TMessage>]
    /// </summary>
    function GetMessagesByStatus(const Token: string; const StatusList: TJsonArray): IJSONRPCResponse;
    /// <summary>
    /// Invokes [function GetMessagesByRQL(const Token: string; const Filter: TJsonObject): TJsonObject]
    /// </summary>
    function GetMessagesByRQL(const Token: string; const Filter: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [function SendMessage(const Token: string; const aMessage: TJsonObject): TJsonObject]
    /// </summary>
    function SendMessage(const Token: string; const aMessage: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [function DeleteMessageByID(const Token: string; const MessageID: Int64): TJsonObject]
    /// </summary>
    function DeleteMessageByID(const Token: string; const MessageID: Int64): TJDOJsonObject;
    /// <summary>
    /// Invokes [function AdminSendMessage(const Token: string; const SenderUserName: string; const aMessage: TJsonObject): TJsonObject]
    /// </summary>
    function AdminSendMessage(const Token: string; const SenderUserName: string; const aMessage: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [function AdminSendTestMessage(const Token: string; const SenderUserName: string; const Recipient: string): TJsonObject]
    /// </summary>
    function AdminSendTestMessage(const Token: string; const SenderUserName: string; const Recipient: string): TJDOJsonObject;
    /// <summary>
    /// Invokes [function CreateMessage(const Token: string; const aMessage: TJsonObject): TJsonObject]
    /// </summary>
    function CreateMessage(const Token: string; const aMessage: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [function AddAttachmentToMessage(const Token: string; const aMessageID: Int64; const aIsRelated: Boolean; const aAttachment: TJsonObject): TJsonObject]
    /// </summary>
    function AddAttachmentToMessage(const Token: string; const aMessageID: Int64; const aIsRelated: Boolean; const aAttachment: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [function CompleteMessage(const Token: string; const aMessageID: Int64): TJsonObject]
    /// </summary>
    function CompleteMessage(const Token: string; const aMessageID: Int64): TJDOJsonObject;
    /// <summary>
    /// Invokes [function BulkSendMessages(const Token: string; const aMetaMessage: TJsonObject; const aBulkMessagesData: TJsonObject): TJsonObject]
    /// </summary>
    function BulkSendMessages(const Token: string; const aMetaMessage: TJsonObject; const aBulkMessagesData: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [function Login(const UserName: string; const Password: string): TJsonObject]
    /// </summary>
    function Login(const UserName: string; const Password: string): TJDOJsonObject;
    /// <summary>
    /// Invokes [function CreateUser(const Token: string; const aUser: TJsonObject): TJsonObject]
    /// </summary>
    function CreateUser(const Token: string; const aUser: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [function UpdateUser(const Token: string; const UserID: Int64; const aUser: TJsonObject): TJsonObject]
    /// </summary>
    function UpdateUser(const Token: string; const UserID: Int64; const aUser: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [procedure ChangePassword(const Token: string; const UserID: Int64; const NewPassword: string)]
    /// </summary>
    procedure ChangePassword(const Token: string; const UserID: Int64; const NewPassword: string);
    /// <summary>
    /// Invokes [procedure DisableUser(const Token: string; const UserID: Int64)]
    /// </summary>
    procedure DisableUser(const Token: string; const UserID: Int64);
    /// <summary>
    /// Invokes [procedure EnableUser(const Token: string; const UserID: Int64)]
    /// </summary>
    procedure EnableUser(const Token: string; const UserID: Int64);
    /// <summary>
    /// Invokes [procedure DeleteUser(const Token: string; const UserID: Int64)]
    /// </summary>
    procedure DeleteUser(const Token: string; const UserID: Int64);
    /// <summary>
    /// Invokes [function DeleteUserByUserName(const Token: string; const UserName: string): TJsonObject]
    /// </summary>
    function DeleteUserByUserName(const Token: string; const UserName: string): TJDOJsonObject;
    /// <summary>
    /// Invokes [function GetUser(const Token: string; const UserID: Int64): TUser]
    /// </summary>
    function GetUser(const Token: string; const UserID: Int64): IJSONRPCResponse;
    /// <summary>
    /// Invokes [function GetUsers(const Token: string; const Filter: TJsonObject): TJsonObject]
    /// </summary>
    function GetUsers(const Token: string; const Filter: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [function CreateContext(const Token: string; const SSOContext: TJsonObject): TJsonObject]
    /// </summary>
    function CreateContext(const Token: string; const SSOContext: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [procedure DeleteContext(const Token: string; const SSOContextID: Int64)]
    /// </summary>
    procedure DeleteContext(const Token: string; const SSOContextID: Int64);
    /// <summary>
    /// Invokes [procedure UpdateContext(const Token: string; const SSOContextID: Int64; const SSOContext: TJsonObject)]
    /// </summary>
    procedure UpdateContext(const Token: string; const SSOContextID: Int64; const SSOContext: TJsonObject);
    /// <summary>
    /// Invokes [function GetContexts(const Token: string; const RQLFilter: string): TJsonObject]
    /// </summary>
    function GetContexts(const Token: string; const RQLFilter: string): TJDOJsonObject;
    /// <summary>
    /// Invokes [function AddContextToUser(const Token: string; const UserID: Int64; const UserContext: TJsonObject): TJsonObject]
    /// </summary>
    function AddContextToUser(const Token: string; const UserID: Int64; const UserContext: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [procedure UpdateContextToUser(const Token: string; const UserContextID: Int64; const UserContext: TJsonObject)]
    /// </summary>
    procedure UpdateContextToUser(const Token: string; const UserContextID: Int64; const UserContext: TJsonObject);
    /// <summary>
    /// Invokes [function GetUserContexts(const Token: string; UserID: Int64): TJsonObject]
    /// Returns all User-Contexts by UserId
    /// </summary>
    function GetUserContexts(const Token: string; UserID: Int64): TJDOJsonObject;
    /// <summary>
    /// Invokes [function GetUserContextsByName(const Token: string; const SSOContextName: string): TJsonObject]
    /// Returns all User-Contexts by ContextName
    /// </summary>
    function GetUserContextsByName(const Token: string; const SSOContextName: string): TJDOJsonObject;
    /// <summary>
    /// Invokes [function GetAvailableContextsForUser(const Token: string; UserID: Int64): TJsonObject]
    /// Returns all Contexts not associated with UserID
    /// </summary>
    function GetAvailableContextsForUser(const Token: string; UserID: Int64): TJDOJsonObject;
    /// <summary>
    /// Invokes [function GetAvailableUsersForContext(const Token: string; ContextID: Int64): TJsonObject]
    /// Returns all Users not associated with ContextID
    /// </summary>
    function GetAvailableUsersForContext(const Token: string; ContextID: Int64): TJDOJsonObject;
    /// <summary>
    /// Invokes [procedure DeleteUserContext(const Token: string; const UserID: Int64; const SSOContextName: string)]
    /// Removes the association between UserID and ContextName
    /// </summary>
    procedure DeleteUserContext(const Token: string; const UserID: Int64; const SSOContextName: string);
    /// <summary>
    /// Invokes [function IsAuthForContext(const Token: string; SSOContextName: string): TJsonObject]
    /// </summary>
    function IsAuthForContext(const Token: string; SSOContextName: string): TJDOJsonObject;
    /// <summary>
    /// Invokes [function RefreshToken(const Token: string): TJsonObject]
    /// Extends the expiration time of a still-valid token. Clients must use the token returned instead of the previous one.
    /// </summary>
    function RefreshToken(const Token: string): TJDOJsonObject;
    /// <summary>
    /// Invokes [procedure UpdateContextUserData(const Token: string; const UserContextID: Int64; const UserData: TJsonObject)]
    /// </summary>
    procedure UpdateContextUserData(const Token: string; const UserContextID: Int64; const UserData: TJsonObject);
end;

implementation

uses
  System.Net.URLClient,
  System.RTTI;

constructor TEmailRPCProxy.Create(const EndpointURL: String);
begin
  inherited Create;
  fRPCExecutor := TMVCJSONRPCExecutor.Create(EndpointURL);
  fRPCExecutor.AddHTTPHeader(TNetHeader.Create('Accept-Encoding', 'gzip'));
  fRPCExecutor.AddHTTPHeader(TNetHeader.Create('User-Agent', 'dmscontainer-delphi-proxy'));

end;

function TEmailRPCProxy.NewReqID: Int64;
begin
  Result := 10000 + Random(10000000);
end;

function TEmailRPCProxy.RPCExecutor: IMVCJSONRPCExecutor;
begin
  Result := fRPCExecutor;
end;


procedure TEmailRPCProxy.SetUserSender(const Token: string; const UserID: Int64; aSender: TJsonObject);
var
  lNotification: IJSONRPCNotification;
begin
  lNotification := TJSONRPCNotification.Create('SetUserSender');
  lNotification.Params.Add(Token);
  lNotification.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  lNotification.Params.Add(aSender);
  fRPCExecutor.ExecuteNotification(lNotification);
end;


function TEmailRPCProxy.RemoveUserSender(const Token: string; const UserID: Int64): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'RemoveUserSender');
  lReq.Params.Add(Token);
  lReq.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.GetUserSender(const Token: string; const UserID: Int64): IJSONRPCResponse;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetUserSender');
  lReq.Params.Add(Token);
  lReq.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp; //TSender
end;


function TEmailRPCProxy.GetMessagesByUserName(const Token: string; const SenderUserName: string): IJSONRPCResponse;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetMessagesByUserName');
  lReq.Params.Add(Token);
  lReq.Params.Add(SenderUserName);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp; //TObjectList<Jobs.Email.Entities.TMessage>
end;


function TEmailRPCProxy.GetMyMessages(const Token: string; const StatusList: TJsonArray): IJSONRPCResponse;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetMyMessages');
  lReq.Params.Add(Token);
  lReq.Params.Add(StatusList);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp; //TObjectList<Jobs.Email.Entities.TMessage>
end;


function TEmailRPCProxy.GetMessageByID(const Token: string; const MessageID: Int64): IJSONRPCResponse;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetMessageByID');
  lReq.Params.Add(Token);
  lReq.Params.Add(MessageID, TJSONRPCParamDataType.pdtLongInteger);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp; //TMessage
end;


function TEmailRPCProxy.GetMessagesByStatus(const Token: string; const StatusList: TJsonArray): IJSONRPCResponse;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetMessagesByStatus');
  lReq.Params.Add(Token);
  lReq.Params.Add(StatusList);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp; //TObjectList<Jobs.Email.Entities.TMessage>
end;


function TEmailRPCProxy.GetMessagesByRQL(const Token: string; const Filter: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetMessagesByRQL');
  lReq.Params.Add(Token);
  lReq.Params.Add(Filter);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.SendMessage(const Token: string; const aMessage: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'SendMessage');
  lReq.Params.Add(Token);
  lReq.Params.Add(aMessage);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.DeleteMessageByID(const Token: string; const MessageID: Int64): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'DeleteMessageByID');
  lReq.Params.Add(Token);
  lReq.Params.Add(MessageID, TJSONRPCParamDataType.pdtLongInteger);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.AdminSendMessage(const Token: string; const SenderUserName: string; const aMessage: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'AdminSendMessage');
  lReq.Params.Add(Token);
  lReq.Params.Add(SenderUserName);
  lReq.Params.Add(aMessage);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.AdminSendTestMessage(const Token: string; const SenderUserName: string; const Recipient: string): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'AdminSendTestMessage');
  lReq.Params.Add(Token);
  lReq.Params.Add(SenderUserName);
  lReq.Params.Add(Recipient);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.CreateMessage(const Token: string; const aMessage: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'CreateMessage');
  lReq.Params.Add(Token);
  lReq.Params.Add(aMessage);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.AddAttachmentToMessage(const Token: string; const aMessageID: Int64; const aIsRelated: Boolean; const aAttachment: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'AddAttachmentToMessage');
  lReq.Params.Add(Token);
  lReq.Params.Add(aMessageID, TJSONRPCParamDataType.pdtLongInteger);
  lReq.Params.Add(aIsRelated);
  lReq.Params.Add(aAttachment);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.CompleteMessage(const Token: string; const aMessageID: Int64): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'CompleteMessage');
  lReq.Params.Add(Token);
  lReq.Params.Add(aMessageID, TJSONRPCParamDataType.pdtLongInteger);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.BulkSendMessages(const Token: string; const aMetaMessage: TJsonObject; const aBulkMessagesData: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'BulkSendMessages');
  lReq.Params.Add(Token);
  lReq.Params.Add(aMetaMessage);
  lReq.Params.Add(aBulkMessagesData);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.Login(const UserName: string; const Password: string): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'Login');
  lReq.Params.Add(UserName);
  lReq.Params.Add(Password);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.CreateUser(const Token: string; const aUser: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'CreateUser');
  lReq.Params.Add(Token);
  lReq.Params.Add(aUser);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.UpdateUser(const Token: string; const UserID: Int64; const aUser: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'UpdateUser');
  lReq.Params.Add(Token);
  lReq.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  lReq.Params.Add(aUser);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


procedure TEmailRPCProxy.ChangePassword(const Token: string; const UserID: Int64; const NewPassword: string);
var
  lNotification: IJSONRPCNotification;
begin
  lNotification := TJSONRPCNotification.Create('ChangePassword');
  lNotification.Params.Add(Token);
  lNotification.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  lNotification.Params.Add(NewPassword);
  fRPCExecutor.ExecuteNotification(lNotification);
end;


procedure TEmailRPCProxy.DisableUser(const Token: string; const UserID: Int64);
var
  lNotification: IJSONRPCNotification;
begin
  lNotification := TJSONRPCNotification.Create('DisableUser');
  lNotification.Params.Add(Token);
  lNotification.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  fRPCExecutor.ExecuteNotification(lNotification);
end;


procedure TEmailRPCProxy.EnableUser(const Token: string; const UserID: Int64);
var
  lNotification: IJSONRPCNotification;
begin
  lNotification := TJSONRPCNotification.Create('EnableUser');
  lNotification.Params.Add(Token);
  lNotification.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  fRPCExecutor.ExecuteNotification(lNotification);
end;


procedure TEmailRPCProxy.DeleteUser(const Token: string; const UserID: Int64);
var
  lNotification: IJSONRPCNotification;
begin
  lNotification := TJSONRPCNotification.Create('DeleteUser');
  lNotification.Params.Add(Token);
  lNotification.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  fRPCExecutor.ExecuteNotification(lNotification);
end;


function TEmailRPCProxy.DeleteUserByUserName(const Token: string; const UserName: string): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'DeleteUserByUserName');
  lReq.Params.Add(Token);
  lReq.Params.Add(UserName);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.GetUser(const Token: string; const UserID: Int64): IJSONRPCResponse;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetUser');
  lReq.Params.Add(Token);
  lReq.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp; //TUser
end;


function TEmailRPCProxy.GetUsers(const Token: string; const Filter: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetUsers');
  lReq.Params.Add(Token);
  lReq.Params.Add(Filter);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.CreateContext(const Token: string; const SSOContext: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'CreateContext');
  lReq.Params.Add(Token);
  lReq.Params.Add(SSOContext);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


procedure TEmailRPCProxy.DeleteContext(const Token: string; const SSOContextID: Int64);
var
  lNotification: IJSONRPCNotification;
begin
  lNotification := TJSONRPCNotification.Create('DeleteContext');
  lNotification.Params.Add(Token);
  lNotification.Params.Add(SSOContextID, TJSONRPCParamDataType.pdtLongInteger);
  fRPCExecutor.ExecuteNotification(lNotification);
end;


procedure TEmailRPCProxy.UpdateContext(const Token: string; const SSOContextID: Int64; const SSOContext: TJsonObject);
var
  lNotification: IJSONRPCNotification;
begin
  lNotification := TJSONRPCNotification.Create('UpdateContext');
  lNotification.Params.Add(Token);
  lNotification.Params.Add(SSOContextID, TJSONRPCParamDataType.pdtLongInteger);
  lNotification.Params.Add(SSOContext);
  fRPCExecutor.ExecuteNotification(lNotification);
end;


function TEmailRPCProxy.GetContexts(const Token: string; const RQLFilter: string): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetContexts');
  lReq.Params.Add(Token);
  lReq.Params.Add(RQLFilter);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.AddContextToUser(const Token: string; const UserID: Int64; const UserContext: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'AddContextToUser');
  lReq.Params.Add(Token);
  lReq.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  lReq.Params.Add(UserContext);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


procedure TEmailRPCProxy.UpdateContextToUser(const Token: string; const UserContextID: Int64; const UserContext: TJsonObject);
var
  lNotification: IJSONRPCNotification;
begin
  lNotification := TJSONRPCNotification.Create('UpdateContextToUser');
  lNotification.Params.Add(Token);
  lNotification.Params.Add(UserContextID, TJSONRPCParamDataType.pdtLongInteger);
  lNotification.Params.Add(UserContext);
  fRPCExecutor.ExecuteNotification(lNotification);
end;


function TEmailRPCProxy.GetUserContexts(const Token: string; UserID: Int64): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetUserContexts');
  lReq.Params.Add(Token);
  lReq.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.GetUserContextsByName(const Token: string; const SSOContextName: string): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetUserContextsByName');
  lReq.Params.Add(Token);
  lReq.Params.Add(SSOContextName);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.GetAvailableContextsForUser(const Token: string; UserID: Int64): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetAvailableContextsForUser');
  lReq.Params.Add(Token);
  lReq.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.GetAvailableUsersForContext(const Token: string; ContextID: Int64): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'GetAvailableUsersForContext');
  lReq.Params.Add(Token);
  lReq.Params.Add(ContextID, TJSONRPCParamDataType.pdtLongInteger);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


procedure TEmailRPCProxy.DeleteUserContext(const Token: string; const UserID: Int64; const SSOContextName: string);
var
  lNotification: IJSONRPCNotification;
begin
  lNotification := TJSONRPCNotification.Create('DeleteUserContext');
  lNotification.Params.Add(Token);
  lNotification.Params.Add(UserID, TJSONRPCParamDataType.pdtLongInteger);
  lNotification.Params.Add(SSOContextName);
  fRPCExecutor.ExecuteNotification(lNotification);
end;


function TEmailRPCProxy.IsAuthForContext(const Token: string; SSOContextName: string): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'IsAuthForContext');
  lReq.Params.Add(Token);
  lReq.Params.Add(SSOContextName);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TEmailRPCProxy.RefreshToken(const Token: string): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'RefreshToken');
  lReq.Params.Add(Token);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


procedure TEmailRPCProxy.UpdateContextUserData(const Token: string; const UserContextID: Int64; const UserData: TJsonObject);
var
  lNotification: IJSONRPCNotification;
begin
  lNotification := TJSONRPCNotification.Create('UpdateContextUserData');
  lNotification.Params.Add(Token);
  lNotification.Params.Add(UserContextID, TJSONRPCParamDataType.pdtLongInteger);
  lNotification.Params.Add(UserData);
  fRPCExecutor.ExecuteNotification(lNotification);
end;

end.
