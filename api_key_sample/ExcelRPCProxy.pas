//------------------------------------------------------------------
// Proxy Unit Generated by Delphi Microservices Container 3.1.42
// Do not modify this unit!
// Generated at: 2020-08-07 15:17:11
//------------------------------------------------------------------
unit ExcelRPCProxy;

interface

uses
  System.SysUtils,
  System.Classes,
  MVCFramework.JSONRPC,
  MVCFramework.JSONRPC.Client,
  MVCFramework.Serializer.Commons,
  JsonDataObjects;

type
  TExcelRPCProxy = class
  protected
    fRPCExecutor: IMVCJSONRPCExecutor;
    function NewReqID: Int64;
  public
    function RPCExecutor: IMVCJSONRPCExecutor;
    constructor Create(const EndpointURL: String); virtual;
    /// <summary>
    /// Invokes [function ConvertToXLSX(const Token: string; const JSONWorkBook: TJsonObject): TJsonObject]
    /// Generates an XLSX file based on a JSON structure
    /// </summary>
    function ConvertToXLSX(const Token: string; const JSONWorkBook: TJsonObject): TJDOJsonObject;
    /// <summary>
    /// Invokes [function Login(const UserName: string; const Password: string): TJsonObject]
    /// </summary>
    function Login(const UserName: string; const Password: string): TJDOJsonObject;
    /// <summary>
    /// Invokes [function RefreshToken(const Token: string): TJsonObject]
    /// Extends the expiration time of a still-valid token. Clients must use the token returned instead of the previous one.
    /// </summary>
    function RefreshToken(const Token: string): TJDOJsonObject;
end;

implementation

uses
  System.Net.URLClient,
  System.RTTI;

constructor TExcelRPCProxy.Create(const EndpointURL: String);
begin
  inherited Create;
  fRPCExecutor := TMVCJSONRPCExecutor.Create(EndpointURL);
  fRPCExecutor.AddHTTPHeader(TNetHeader.Create('Accept-Encoding', 'gzip'));
  fRPCExecutor.AddHTTPHeader(TNetHeader.Create('User-Agent', 'dmscontainer-delphi-proxy'));

end;

function TExcelRPCProxy.NewReqID: Int64;
begin
  Result := 10000 + Random(10000000);
end;

function TExcelRPCProxy.RPCExecutor: IMVCJSONRPCExecutor;
begin
  Result := fRPCExecutor;
end;


function TExcelRPCProxy.ConvertToXLSX(const Token: string; const JSONWorkBook: TJsonObject): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'ConvertToXLSX');
  lReq.Params.Add(Token);
  lReq.Params.Add(JSONWorkBook);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TExcelRPCProxy.Login(const UserName: string; const Password: string): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'Login');
  lReq.Params.Add(UserName);
  lReq.Params.Add(Password);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;


function TExcelRPCProxy.RefreshToken(const Token: string): TJDOJsonObject;
var
  lReq: IJSONRPCRequest;
  lResp: IJSONRPCResponse;
begin
  lReq := TJSONRPCRequest.Create(NewReqID, 'RefreshToken');
  lReq.Params.Add(Token);
  lResp := fRPCExecutor.ExecuteRequest(lReq);
  Result := lResp.ResultAsJSONObject.Clone as TJDOJsonObject; //TJsonObject
end;

end.
