# ------------------------------------------------------------------
# Proxy Script Generated by Delphi Microservices Container 4.0.26
# Do not modify this code!
# Generated at: 2021-03-08 17:30:41
# ------------------------------------------------------------------

import requests
import urllib3

urllib3.disable_warnings()


class CalculatorRPCException(Exception):
    pass


class CalculatorRPCProxy:
    def __init__(self, base_url):
        self.__id = 1
        self.base_url = base_url
        self.headers = {
            "content-type": "application/json",
            "accept": "application/json"
        }

    def __get_next_id(self):
        self.__id += 1
        return self.__id

    def __execute(self, req):
        isnotif = req.get("id") is None
        res = requests.post(self.base_url, json=req, headers=self.headers, verify=False)
        if res.status_code == 204:  # no content
            if isnotif:
                return None
            else:
                raise CalculatorRPCException(0, "Protocol error for Notification")
        if res.headers["content-type"].lower().find("application/json") != 0:
            raise CalculatorRPCException("Invalid ContentType in response: " + res.headers["content-type"])
        jres = res.json()
        if jres.get("error"):
            raise CalculatorRPCException(jres.get("error").get("message"))
        if not jres.get("result"):
            raise CalculatorRPCException(0, "Protocol error for Request")
        return jres["result"]

    def __new_req(self, method, typ):
        req = dict(jsonrpc="2.0", method=method, params=[])
        if typ == "request":
            req["id"] = self.__get_next_id()
        return req

    # end of library code

    # Following methods are automatically generated

    def sum(self, a, b):
        """
        Invokes [function Sum(const A: Integer; const B: Integer): Integer]
        Returns the sum of two integers
        """
        req = self.__new_req("Sum", "request")
        req["params"].append(a)
        req["params"].append(b)
        result = self.__execute(req)
        return result

    def diff(self, a, b):
        """
        Invokes [function Diff(const A: Integer; const B: Integer): Integer]
        Returns the difference between two integers
        """
        req = self.__new_req("Diff", "request")
        req["params"].append(a)
        req["params"].append(b)
        result = self.__execute(req)
        return result

# end of generated proxy
